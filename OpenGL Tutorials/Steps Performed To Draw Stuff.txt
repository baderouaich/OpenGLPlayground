/* OpenGL Triangle Drawing Steps:
* # Initialization:
* 1- Create VertexArray object glGenVertexArrays(1, &m_id);
* 2- Create VertexBuffer objects glGenBuffers(1, &m_id);
* 3- Bind and Set vertices buffer to VertexBuffer objects  glBindBuffer(GL_ARRAY_BUFFER, m_id) & glBufferData(GL_ARRAY_BUFFER, size, vertices, GL_STATIC_DRAW|GL_DYNAMIC_DRAW))
* 4- Create Set BufferLayout to VertexBuffer, to tell OpenGL what are my vertices contain of? positions and colors? or positions only...and their types
* 5- Add Created VertexBuffer objects to VertexArray m_vertex_array->AddVertexBuffer(vertex_buffer);
* 6- Create & Bind IndexBuffer object, to tell OpenGL how to draw vertices in order from 0 to N vertices  glGenBuffers(1, &m_id); && glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_id) && glBufferData(GL_ELEMENT_ARRAY_BUFFER, count * sizeof(decltype(indices[0])), indices, GL_STATIC_DRAW);
* 7- Set IndexBuffer object to VertexArray (bind vao, bind ibo)
* 8- Create Shader program of vertex and fragment, with layout(location = 0) in vec3 a_Position; in vertex according to your vertices layout, and uniform vec4 u_Color; if u want to upload them from cpp
* # Draw
* 1- Clear buffers glClearColor(0.2f, 0.3f, 0.3f, 1.0f) && glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT)
* 2- Bind & set uniform u_Color to m_triangle_color which modifies by ui settings m_shader->Bind(); && m_shader->SetVec4f("u_Color", m_triangle_color);
* 3- Bind vertex array to be drawn m_vertex_array->Bind();
* 4- Draw triangle glDrawElements(GL_TRIANGLES, m_vertex_array->GetIndexBuffer()->GetCount(), GL_UNSIGNED_INT, nullptr);
* 5- Unbind Shader & VAO
*/