#### Notes from book ./OpenGL Tutorials/LearnOpenGL_Book.pdf ####

- p20 s4: Make sure you have OpenGL versions 3.3 or higher installed on your system/hardware otherwise
the application will crash or display undefined behavior.

- p26 s5: There is a difference between a 2D coordinate and a pixel. A 2D coordinate is a very precise
representation of where a point is in 2D space, while a 2D pixel is an approximation of that point
limited by the resolution of your screen/window

- p27 s5: In order for OpenGL to know what to make of your collection of coordinates and color values
OpenGL requires you to hint what kind of render types you want to form with the data. Do we
want the data rendered as a collection of points, a collection of triangles or perhaps just one long
line? Those hints are called primitives and are given to OpenGL while calling any of the drawing
commands. Some of these hints are GL_POINTS, GL_TRIANGLES and GL_LINE_STRIP.


- p27 s5: Primitives: In order for OpenGL to know what to make of your collection of coordinates and color
values OpenGL requires you to hint what kind of render types you want to form with the
data. Do we want the data rendered as a collection of points, a collection of triangles or
perhaps just one long line? Those hints are called primitives and are given to OpenGL
while calling any of the drawing commands. Some of these hints are GL_POINTS,
GL_TRIANGLES and GL_LINE_STRIP.


- p27 s5: The output of the geometry shader is then passed on to the rasterization stage where it maps the resulting
primitive(s) to the corresponding pixels on the final screen, resulting in fragments for the fragment shader
to use. Before the fragment shaders runs, clipping is performed. Clipping discards all fragments that are
outside your view, increasing performance.

- p27 s5: A fragment in OpenGL is all the data required for OpenGL to render a single pixel.


- p28 s5.1: The geometry shader is optional and usually left to its default shader.
In Modern OpenGL we are required to define at least a vertex and fragment shader of our own (there
are no default vertex/fragment shaders on the GPU). For this reason it is often quite difficult to start learning
Modern OpenGL since a great deal of knowledge is required before being able to render your first triangle.
Once you do get to finally render your triangle at the end of this chapter you will end up knowing a lot more
about graphics programming.


- p28 s5.1: To start drawing something we have to first give OpenGL some input vertex data. OpenGL is a 3D graphics
library so all coordinates that we specify in OpenGL are in 3D (x, y and z coordinate). OpenGL doesn’t
simply transform all your 3D coordinates to 2D pixels on your screen; OpenGL only processes 3D coordinates
when they’re in a specific range between -1.0 and 1.0 on all 3 axes (x, y and z). All coordinates within
this so called normalized device coordinates range will end up visible on your screen (and all coordinates
outside this region won’t).

